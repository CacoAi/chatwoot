version: 2.1

orbs:
  node: circleci/node@6.1.0

jobs:
  build:
    working_directory: ~/build
    machine:
      image: ubuntu-2204:2024.05.1
    resource_class: large
    environment:
      RAILS_LOG_TO_STDOUT: false
      COVERAGE: true
      LOG_LEVEL: warn
    parallelism: 4
    steps:
      - checkout
      
      # Node.js setup with caching
      - restore_cache:
          keys:
            - v1-node-{{ checksum "package.json" }}-{{ checksum "pnpm-lock.yaml" }}
      - node/install:
          node-version: '23.7'
      - node/install-pnpm
      - node/install-packages:
          pkg-manager: pnpm
          override-ci-command: pnpm i --frozen-lockfile
      - save_cache:
          key: v1-node-{{ checksum "package.json" }}-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - node_modules
      
      # System dependencies with caching
      - restore_cache:
          keys:
            - v1-system-deps-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: Install System Dependencies
          command: |
            sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
            sudo apt-get update -y -qq
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y -qq \
              libpq-dev redis-server postgresql-common postgresql-16 postgresql-16-pgvector \
              build-essential git curl libssl-dev zlib1g-dev libreadline-dev libyaml-dev \
              openjdk-11-jdk jq software-properties-common ca-certificates imagemagick \
              libxml2-dev libxslt1-dev file g++ gcc autoconf gnupg2 patch ruby-dev \
              liblzma-dev libgmp-dev libncurses5-dev libffi-dev libgdbm6 libgdbm-dev libvips
      - save_cache:
          key: v1-system-deps-{{ .Environment.CIRCLE_JOB }}
          paths:
            - /var/cache/apt

      # Ruby setup with caching
      - restore_cache:
          keys:
            - v1-rvm-ruby-3.3.3
      - run:
          name: Install RVM and Ruby
          command: |
            gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB --quiet
            curl -sSL https://get.rvm.io | bash -s stable --quiet
            echo 'source ~/.rvm/scripts/rvm' >> $BASH_ENV
            source ~/.rvm/scripts/rvm
            rvm install "3.3.3" --quiet
            rvm use 3.3.3 --default
            gem install bundler -v 2.5.16 --quiet
      - save_cache:
          key: v1-rvm-ruby-3.3.3
          paths:
            - ~/.rvm

      # Bundle install with caching
      - restore_cache:
          keys:
            - v1-gems-{{ checksum "Gemfile" }}-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Ruby Dependencies
          command: |
            source ~/.rvm/scripts/rvm
            bundle install --jobs=4 --retry=3 --quiet
      - save_cache:
          key: v1-gems-{{ checksum "Gemfile" }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Setup tools and database
      - run:
          name: Setup Tools and Database
          command: |
            mkdir -p ~/tmp ~/build/coverage/{frontend,backend} ~/tmp/test-results
            curl -sL https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ~/tmp/cc-test-reporter
            chmod +x ~/tmp/cc-test-reporter
            curl -sL https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/6.3.0/openapi-generator-cli-6.3.0.jar > ~/tmp/openapi-generator-cli-6.3.0.jar
            pg_pass=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 15)
            sed -i "s/REPLACE_WITH_PASSWORD/${pg_pass}/g" .circleci/setup_chatwoot.sql
            sudo -u postgres psql -f .circleci/setup_chatwoot.sql -q
            cp .env.example .env
            sed -i '/^FRONTEND_URL/d' .env
            sed -i "s|REDIS_URL=.*|REDIS_URL=redis://localhost:6379|" .env
            sed -i "s|POSTGRES_HOST=.*|POSTGRES_HOST=localhost|" .env
            sed -i "s|POSTGRES_USERNAME=.*|POSTGRES_USERNAME=chatwoot|" .env
            sed -i "s|POSTGRES_PASSWORD=.*|POSTGRES_PASSWORD=${pg_pass}|" .env
            echo "INSTALLATION_ENV=circleci" >> .env
            bundle exec rails db:chatwoot_prepare --quiet

      # Quality checks (run on node 0 only)
      - run:
          name: Run Quality Checks
          command: |
            if [ "$CIRCLE_NODE_INDEX" = "0" ]; then
              bundle exec rake swagger:build --quiet
              git diff --exit-code swagger/swagger.json || (echo "ERROR: swagger.json is out of sync" && exit 1)
              java -jar ~/tmp/openapi-generator-cli-6.3.0.jar validate -i swagger/swagger.json -q
              bundle exec bundle audit update -q && bundle exec bundle audit check -v -q
              bundle exec rubocop --parallel
              pnpm run eslint --max-warnings=0 --quiet
            fi

      # All tests and coverage
      - run:
          name: Run Tests and Coverage
          command: |
            ~/tmp/cc-test-reporter before-build
            # Frontend tests (run on node 0 only)
            if [ "$CIRCLE_NODE_INDEX" = "0" ]; then
              pnpm run test:coverage --ci --maxWorkers=50%
              ~/tmp/cc-test-reporter format-coverage -t lcov -o "~/build/coverage/frontend/codeclimate.json" -q
            fi
            # Backend tests (split across all nodes)
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings --timings-type=file)
            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out ~/tmp/test-results/rspec.xml \
                            -- ${TESTFILES}
            ~/tmp/cc-test-reporter format-coverage -t simplecov -o "~/build/coverage/backend/codeclimate.$CIRCLE_NODE_INDEX.json" -q
          no_output_timeout: 30m

      # Store results
      - store_test_results:
          path: ~/tmp/test-results
      - store_artifacts:
          path: ~/build/coverage

workflows:
  build_and_test:
    jobs:
      - build